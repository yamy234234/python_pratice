
-----

# My Python Learning Journey (Beginner to Intermediate)

This repository chronicles my foundational Python learning, focusing on core programming concepts essential

## 1\. Variables & Data Types

  * **Variables**: Named containers for data.
    ```python
    my_age = 30         # int (integer)
    my_name = "John Doe"  # str (string)
    is_active = True    # bool (boolean)
    pi_value = 3.14     # float (floating-point number)
    ```
  * **Type Conversion**: Change data type.
    ```python
    str_num = "123"
    int_num = int(str_num)   # "123" -> 123
    float_num = float(int_num) # 123 -> 123.0
    ```
  * **Comments**: `#` for single-line, `"""Docstrings"""` for multi-line.

-----

## 2\. Operators

  * **Arithmetic**: `+`, `-`, `*`, `/`, `%` (modulo), `**` (exponent), `//` (floor division).
    ```python
    result = 10 % 3  # Output: 1
    power = 2 ** 3   # Output: 8
    ```
  * **Comparison**: `==`, `!=`, `>`, `<`, `>=`, `<=`. Return `True` or `False`.
    ```python
    is_equal = (5 == 5)  # True
    is_not_equal = (5 != 10) # True
    ```
  * **Logical**: `and`, `or`, `not`. Combine conditions.
    ```python
    condition1 = True
    condition2 = False
    if condition1 and not condition2: # True and True -> True
        print("Both conditions met.")
    ```

-----

## 3\. String Manipulation

  * **Indexing & Slicing**: Access parts of a string.
    ```python
    text = "Python"
    first_char = text[0]   # 'P'
    slice_text = text[0:3] # 'Pyt'
    ```
  * **String Methods**: Built-in functions for strings.
    ```python
    message = "  Hello World!  "
    print(message.upper())     # "  HELLO WORLD!  "
    print(message.strip())     # "Hello World!" (removes leading/trailing whitespace)
    print(message.replace("World", "Python")) # "  Hello Python!  "
    ```
  * **F-strings**: Easy string formatting.
    ```python
    name = "Alice"
    age = 30
    print(f"My name is {name} and I am {age} years old.")
    # Formatting numbers:
    pi = 3.14159
    print(f"Pi to 2 decimal places: {pi:.2f}") # Output: 3.14
    ```

-----

## 4\. Data Structures

  * **Lists (`[]`)**: Ordered, mutable (changeable) collections.
    ```python
    my_list = [1, "apple", True]
    my_list.append("banana")  # Add item
    my_list.pop(0)            # Remove by index
    print(my_list[0])         # Access by index: "apple"
    ```
  * **Tuples (`()`)**: Ordered, immutable (unchangeable) collections.
    ```python
    my_tuple = (1, "apple", True)
    # my_tuple.append("banana") # Error! Tuples cannot be modified.
    print(my_tuple[1])        # Access by index: "apple"
    ```
  * **Dictionaries (`{key: value}`)**: Unordered (Python 3.7+ preserves insertion order), key-value pairs.
    ```python
    my_dict = {"name": "Alice", "age": 30}
    print(my_dict["name"])    # Access by key: "Alice"
    my_dict["city"] = "Seoul" # Add/Update
    del my_dict["age"]        # Delete
    ```
  * **Sets (`{}`)**: Unordered, unindexed collections that **do not allow duplicate elements**.
    ```python
    my_set = {1, 2, 3, 2, 1} # my_set will be {1, 2, 3}
    my_set.add(4)
    print(2 in my_set)       # True
    ```

-----

## 5\. Conditional Statements (`if`, `elif`, `else`)

  * Execute code based on conditions. **Indentation is crucial\!**
    ```python
    score = 85
    if score >= 90:
        print("Grade A")
    elif score >= 80:
        print("Grade B")
    else:
        print("Grade C or lower")
    ```
  * Logical operators (`and`, `or`, `not`) for complex conditions.
    ```python
    is_sunny = True
    temperature = 28
    if is_sunny and temperature > 25:
        print("It's a hot sunny day!")
    ```

-----

## 6\. Loops (`for`, `while`)

  * **`for` loop**: Iterate over a sequence (list, string, range) or for a fixed number of times.
    ```python
    # Iterate over a list
    fruits = ["apple", "banana"]
    for fruit in fruits:
        print(fruit)

    # Fixed number of times (0 to 4)
    for i in range(5):
        print(f"Loop {i}")
    ```
  * **`while` loop**: Repeat as long as a condition is `True`.
    ```python
    count = 0
    while count < 3:
        print(f"Counting: {count}")
        count += 1 # Must change condition to avoid infinite loop
    ```
  * **`break`**: Exit the loop immediately.
    ```python
    password = "secret"
    while True:
        user_input = input("Enter password: ")
        if user_input == password:
            print("Login successful!")
            break # Exit the loop
        else:
            print("Incorrect password.")
    ```
  * **`continue`**: Skip the rest of the current iteration and move to the next.
    ```python
    for num in range(1, 6):
        if num % 2 == 0: # If even
            continue     # Skip printing even numbers
        print(num)       # Only prints odd numbers (1, 3, 5)
    ```

-----

## 7\. Functions (`def`)

  * Reusable blocks of code.
    ```python
    def greet(name): # 'name' is a parameter
        """This function greets the given name."""
        print(f"Hello, {name}!")

    greet("Alice")   # Calling the function with "Alice" as an argument

    def add_numbers(a, b):
        return a + b # Returns the sum

    result = add_numbers(5, 3) # result will be 8
    print(f"Sum: {result}")
    ```
  * **Multiple Return Values**: Functions can return multiple values as a tuple.
    ```python
    def get_coords():
        return 10, 20
    x, y = get_coords() # Unpack tuple directly
    print(f"X: {x}, Y: {y}") # X: 10, Y: 20
    ```
  * **Local vs. Global Variables**:
      * **Local**: Defined inside a function, only accessible within that function.
      * **Global**: Defined outside functions, accessible everywhere.
      * `global` keyword: Used inside a function to **modify** a global variable. Must be declared *before* any use of that variable in the function if modification is intended.
    <!-- end list -->
    ```python
    global_var = "Original"

    def modify_global_var():
        global global_var # Declare intent to modify the global variable
        global_var = "Modified inside function"
        local_var = "I am local"
        print(f"Inside: {global_var}")
        print(f"Inside: {local_var}")

    modify_global_var()
    print(f"Outside: {global_var}") # Shows "Modified inside function"
    # print(local_var) # Error: local_var is not defined outside function
    ```

-----

**Next Steps**: File I/O and Exception Handling.

-----
